{"version":3,"sources":["scripts/main.js"],"names":["formatSalaryToNumber","salary","Number","replace","formatNumberToSalary","num","toLocaleString","getEmployees","nodeListOfEmployees","employeesItems","map","employee","name","cells","textContent","position","office","age","createSorterByKey","field","asc","prev","curr","sortMultiplier","localeCompare","updateEmployeesMarkup","employeesList","tableBodyMarkup","tableBody","innerHTML","createForm","document","body","insertAdjacentHTML","isValid","formElements","minNameLength","inputNameMatch","value","match","inputNameLength","length","inputAge","pushNotification","title","description","type","notification","createElement","className","dataset","qa","style","top","right","transition","opacity","insertAdjacentElement","setTimeout","remove","createInput","target","previousValue","targetStyle","window","getComputedStyle","targetPadding","padding","slice","inputWidth","clientWidth","inputMarkup","saveInputValueToTable","tableDataItem","input","trim","booleanToggler","bool","table","querySelector","tBodies","form","eventsData","prevTarget","clickCount","employees","rows","addEventListener","e","tableHeading","closest","sortKey","toLowerCase","isASCSort","compareFunction","sort","previusActiveRow","classList","toggle","detail","focus","blurEvent","keypressEvent","currentInput","key","preventDefault","elements","newEmployee","reset","unshift"],"mappings":"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","file":"main.9039e1b0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction formatSalaryToNumber(salary) {\n  return Number(salary.replace(/\\$|,/gi, ''));\n};\n\nfunction formatNumberToSalary(num) {\n  return `$${num.toLocaleString('en')}`;\n};\n\nfunction getEmployees(nodeListOfEmployees) {\n  const employeesItems = [...nodeListOfEmployees];\n\n  return employeesItems.map((employee) => ({\n    name: employee.cells[0].textContent,\n    position: employee.cells[1].textContent,\n    office: employee.cells[2].textContent,\n    age: Number(employee.cells[3].textContent),\n    salary: formatSalaryToNumber(employee.cells[4].textContent),\n  }));\n};\n\nfunction createSorterByKey(field, asc = true) {\n  return (prev, curr) => {\n    if (typeof curr[field] === 'string') {\n      const sortMultiplier = asc ? 1 : -1;\n\n      return prev[field].localeCompare(curr[field]) * sortMultiplier;\n    }\n\n    if (asc) {\n      return prev[field] - curr[field];\n    }\n\n    return curr[field] - prev[field];\n  };\n};\n\nfunction updateEmployeesMarkup(employeesList) {\n  let tableBodyMarkup = '';\n\n  for (const employee of employeesList) {\n    const tableEmployeeMarkup = `\n      <tr>\n        <td>${employee.name}</td>\n        <td>${employee.position}</td>\n        <td>${employee.office}</td>\n        <td>${employee.age}</td>\n        <td>${formatNumberToSalary(employee.salary)}</td>\n      </tr>\n    `;\n\n    tableBodyMarkup += tableEmployeeMarkup;\n  }\n\n  tableBody.innerHTML = tableBodyMarkup;\n}\n\nfunction createForm() {\n  const formMarkup = `\n    <form class=\"new-employee-form\">\n      <label>\n        Name:\n        <input\n          name=\"name\"\n          type=\"text\"\n          data-qa=\"name\"\n          required\n        >\n      </label>\n\n      <label>\n        Position:\n        <input\n          name=\"position\"\n          type=\"text\"\n          data-qa=\"position\"\n          required\n        >\n      </label>\n\n      <label>\n        Office:\n        <select\n          name=\"office\"\n          data-qa=\"office\"\n          required\n        >\n          <option value=\"Tokyo\">Tokyo</option>\n          <option value=\"Singapore\">Singapore</option>\n          <option value=\"London\">London</option>\n          <option value=\"New York\">New York</option>\n          <option value=\"Edinburgh\">Edinburgh</option>\n          <option value=\"San Francisco\">San Francisco</option>\n        </select>\n      </label>\n\n      <label>\n        Age:\n        <input\n          name=\"age\"\n          type=\"number\"\n          data-qa=\"age\"\n          required\n        >\n      </label>\n\n      <label>\n        Salary:\n        <input\n          name=\"salary\"\n          type=\"number\"\n          data-qa=\"salary\"\n          required\n        >\n      </label>\n      <button type=\"sumbit\">Save to table</button>\n    </form>\n  `;\n\n  document.body.insertAdjacentHTML('beforeend', formMarkup);\n}\n\ncreateForm();\n\nfunction isValid(formElements) {\n  const minNameLength = 4;\n  const minAgeValue = 18;\n  const maxAgeValue = 90;\n\n  const inputNameMatch = formElements.name.value.match(/\\D/gi);\n  const inputNameLength = inputNameMatch ? inputNameMatch.length : 0;\n  const inputAge = formElements.age.value;\n\n  if (inputNameLength < minNameLength) {\n    pushNotification(\n      'Error',\n      'Name length is less then 4 letters!',\n      'error'\n    );\n\n    return false;\n  }\n\n  if (inputAge < minAgeValue) {\n    pushNotification('Error', 'You must be 18 years old or above!', 'error');\n\n    return false;\n  }\n\n  if (inputAge > maxAgeValue) {\n    pushNotification('Error', 'You must be 90 years old or less!', 'error');\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction pushNotification(title, description, type) {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.dataset.qa = 'notification';\n\n  notification.innerHTML = `\n    <h2 class=\"title\">\n      ${title}\n    </h2>\n    <p>\n      ${description}\n    </p>\n  `;\n\n  notification.style.top = `10px`;\n  notification.style.right = `10px`;\n  notification.style.transition = `opacity .3s`;\n  notification.style.opacity = '0';\n\n  document.body.insertAdjacentElement('beforeend', notification);\n\n  setTimeout(() => {\n    notification.style.opacity = '1';\n  }, 0);\n\n  setTimeout(() => {\n    notification.style.opacity = '0';\n  }, 1700);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n};\n\nfunction createInput(target, previousValue) {\n  const targetStyle = window.getComputedStyle(target);\n  const targetPadding = Number(targetStyle.padding.slice(0, -2));\n  const inputWidth = target.clientWidth - (targetPadding * 2);\n\n  const inputMarkup = `\n    <input\n      type=\"text\"\n      value=\"${previousValue}\"\n      class=\"cell-input\"\n      style=\"width: ${inputWidth}px\"\n    />\n  `;\n\n  target.innerHTML = inputMarkup;\n}\n\nfunction saveInputValueToTable(tableDataItem, input, previousValue) {\n  if (input.value.trim() === '') {\n    tableDataItem.innerHTML = previousValue || 'Empty!';\n\n    return;\n  }\n\n  tableDataItem.innerHTML = input.value.trim();\n}\n\nfunction booleanToggler(bool) {\n  return !bool;\n}\n\nconst table = document.querySelector('table');\nconst tableBody = table.tBodies[0];\nconst form = document.querySelector('.new-employee-form');\nconst eventsData = {\n  prevTarget: null,\n  clickCount: 0,\n};\nlet employees = getEmployees(tableBody.rows);\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target;\n  const tableHeading = target.closest('th');\n  const tableDataItem = target.closest('td');\n\n  if (tableHeading && !tableHeading.closest('tFoot')) {\n    const sortKey = tableHeading.textContent.trim('').toLowerCase();\n    const isASCSort = eventsData.prevTarget !== e.target;\n    let compareFunction = createSorterByKey(sortKey, isASCSort);\n\n    if (eventsData.prevTarget === e.target) {\n      eventsData.clickCount++;\n    } else {\n      eventsData.clickCount = 0;\n    }\n\n    if (eventsData.prevTarget === e.target && eventsData.clickCount > 1) {\n      compareFunction = createSorterByKey(sortKey, booleanToggler(isASCSort));\n      eventsData.clickCount = 0;\n    }\n\n    eventsData.prevTarget = e.target;\n    employees.sort(compareFunction);\n    updateEmployeesMarkup(employees);\n  }\n\n  if (tableDataItem) {\n    const previusActiveRow = tableBody.querySelector('.active');\n\n    previusActiveRow && previusActiveRow.classList.remove('active');\n    tableDataItem.closest('tr').classList.toggle('active');\n  }\n\n  if (tableDataItem && e.detail === 2) {\n    const previousValue = tableDataItem.textContent.trim();\n\n    createInput(tableDataItem, previousValue);\n\n    const input = document.querySelector('.cell-input');\n\n    input.focus();\n\n    input.addEventListener('blur', (blurEvent) => {\n      saveInputValueToTable(tableDataItem, blurEvent.target, previousValue);\n      employees = getEmployees(tableBody.rows);\n    });\n\n    input.addEventListener('keypress', (keypressEvent) => {\n      const currentInput = keypressEvent.target;\n\n      if (keypressEvent.key === 'Enter') {\n        saveInputValueToTable(tableDataItem, currentInput, previousValue);\n        employees = getEmployees(tableBody.rows);\n      }\n    });\n  }\n});\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  if (!isValid(form.elements)) {\n    return;\n  }\n\n  const newEmployee = {\n    name: form.elements.name.value,\n    position: form.elements.position.value,\n    office: form.elements.office.value,\n    age: Number(form.elements.age.value),\n    salary: formatSalaryToNumber(form.elements.salary.value),\n  };\n\n  form.reset();\n  employees.unshift(newEmployee);\n  updateEmployeesMarkup(employees);\n  pushNotification('Complete', 'Message example.', 'success');\n});\n"]}